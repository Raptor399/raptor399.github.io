{"version":3,"sources":["component/DisplayDistance.js","component/DisplayElevation.js","component/Button.js","component/ButtonPanel.js","logic/calculate.js","logic/isNumber.js","component/App.js","index.js"],"names":["DisplayDistance","className","this","props","value","React","Component","DisplayElevation","elevation","distance","faction","dist","parseFloat","Math","round","elevationFromDistance","Button","handleClick","clickHandler","name","dark","orange","quart","wide","join","trim","onClick","ButtonPanel","buttonName","calculate","obj","total","next","test","length","parseInt","toString","App","state","setState","ReactDOM","render","document","getElementById"],"mappings":"uSAKqBA,G,kKAKnB,WACE,OACE,yBAAKC,UAAU,8BACb,yBAAKA,UAAU,SAASC,KAAKC,MAAMC,OACnC,yBAAKH,UAAU,SAAf,iB,GATqCI,IAAMC,Y,UCuB9BC,E,4JAMnB,WACE,IAAMC,EA9BV,SAA+BC,EAAUC,GACvC,GAAiB,OAAbD,EACF,OAAO,EAGT,IAAME,EAAOC,WAAWH,GAExB,GAAIE,GAAQ,KAAOA,GAAQ,KACvB,OAAgB,OAAZD,GAAgC,QAAZA,GAAiC,QAAZA,EAGpCG,KAAKC,OAFD,OAEYH,EADb,SAMHE,KAAKC,MAAO,KAHT,OAGmBH,EAFnB,IAE+B,IAI/C,OAAO,EAUaI,CAAsBb,KAAKC,MAAMC,MAAOF,KAAKC,MAAMO,SAGrE,OACE,yBAAKT,UAAU,+BACb,yBAAKA,UAAU,SAASO,GACxB,yBAAKP,UAAU,SAAf,kB,GAbsCI,IAAMC,WCxB/BU,G,kNAUnBC,YAAc,WACZ,EAAKd,MAAMe,aAAa,EAAKf,MAAMgB,O,4CAGrC,WACE,IAAMlB,EAAY,CAChB,mBACAC,KAAKC,MAAMiB,KAAO,OAAS,GAC3BlB,KAAKC,MAAMO,QAAU,UAAY,GACjCR,KAAKC,MAAMkB,OAAS,SAAW,GAC/BnB,KAAKC,MAAMmB,MAAQ,QAAU,GAC7BpB,KAAKC,MAAMoB,KAAO,OAAS,IAG7B,OACE,yBAAKtB,UAAWA,EAAUuB,KAAK,KAAKC,QAClC,4BAAQC,QAASxB,KAAKe,aAAcf,KAAKC,MAAMgB,W,GA1BnBd,IAAMC,YCErBqB,G,kNAOnBV,YAAc,SAAAW,GACZ,EAAKzB,MAAMe,aAAaU,I,4CAG1B,WACE,OACE,yBAAK3B,UAAU,0BACb,6BACE,kBAAC,EAAD,CAAQkB,KAAK,IAAID,aAAchB,KAAKe,YAAaK,OAAK,EAACD,QAAM,IAC7D,kBAAC,EAAD,CAAQF,KAAK,IAAID,aAAchB,KAAKe,YAAaK,OAAK,EAACF,MAAI,IAC3D,kBAAC,EAAD,CAAQD,KAAK,IAAID,aAAchB,KAAKe,YAAaK,OAAK,EAACF,MAAI,IAC3D,kBAAC,EAAD,CAAQD,KAAMjB,KAAKC,MAAMO,QAASQ,aAAchB,KAAKe,YAAaK,OAAK,EAACF,MAAI,EAACV,SAAO,KAEtF,6BACE,kBAAC,EAAD,CAAQS,KAAK,IAAID,aAAchB,KAAKe,cACpC,kBAAC,EAAD,CAAQE,KAAK,IAAID,aAAchB,KAAKe,cACpC,kBAAC,EAAD,CAAQE,KAAK,IAAID,aAAchB,KAAKe,eAEtC,6BACE,kBAAC,EAAD,CAAQE,KAAK,IAAID,aAAchB,KAAKe,cACpC,kBAAC,EAAD,CAAQE,KAAK,IAAID,aAAchB,KAAKe,cACpC,kBAAC,EAAD,CAAQE,KAAK,IAAID,aAAchB,KAAKe,eAEtC,6BACE,kBAAC,EAAD,CAAQE,KAAK,IAAID,aAAchB,KAAKe,cACpC,kBAAC,EAAD,CAAQE,KAAK,IAAID,aAAchB,KAAKe,cACpC,kBAAC,EAAD,CAAQE,KAAK,IAAID,aAAchB,KAAKe,eAEtC,6BACE,kBAAC,EAAD,CAAQE,KAAK,IAAID,aAAchB,KAAKe,YAAaM,MAAI,U,GApCtBlB,IAAMC,Y,MC8BhC,SAASuB,EAAUC,EAAKF,GACrC,MAAmB,QAAfA,EACK,CAAClB,QAAS,OACO,QAAfkB,EACF,CAAClB,QAAS,OACO,QAAfkB,EACF,CAAClB,QAAS,OAGA,MAAfkB,EACK,CACLG,MAAO,KACPC,KAAM,KACNvB,SAAU,MChDP,SAASwB,KDoDHL,GACQ,MAAfA,GAAuC,MAAjBE,EAAIrB,SAErB,GAmBF,CACLA,SAfmB,OAAjBqB,EAAIrB,UAAsC,MAAjBqB,EAAIrB,SAEjBmB,EAGVE,EAAIrB,SAASyB,OAAS,EAEVJ,EAAIrB,SAAWmB,EAGfE,EAAIrB,SAMpBsB,MAAO,MAIQ,MAAfH,EAYK,CACLnB,SATmB,OAAjBqB,EAAIrB,SACQ,IACL0B,SAASL,EAAIrB,UAAY,MACnB0B,SAASL,EAAIrB,UAAY,GAAG2B,WAE7BN,EAAIrB,UAQH,MAAfmB,EAIK,CACLnB,SAHkC,OAAjBqB,EAAIrB,UAAsC,MAAjBqB,EAAIrB,SAAoB,MAAQ0B,SAASL,EAAIrB,UAAY,GAAG2B,iBAF1G,E,UE3FmBC,E,4MACnBC,MAAQ,CACN7B,SAAU,KACVD,UAAW,KACXE,QAAS,O,EAGXO,YAAc,SAAAW,GACZ,EAAKW,SAASV,EAAU,EAAKS,MAAOV,K,4CAGtC,WACE,OACE,yBAAK3B,UAAU,iBACb,6BACE,kBAAC,EAAD,CAAiBG,MAAOF,KAAKoC,MAAM7B,UAAY,MAC/C,kBAAC,EAAD,CAAkBL,MAAOF,KAAKoC,MAAM7B,UAAY,IAAKC,QAASR,KAAKoC,MAAM5B,WAE3E,kBAAC,EAAD,CAAaQ,aAAchB,KAAKe,YAAaP,QAASR,KAAKoC,MAAM5B,e,GAlBxCL,IAAMC,W,YCDvCkC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.49c2daea.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./DisplayDistance.css\";\n\nexport default class DisplayDistance extends React.Component {\n  static propTypes = {\n    value: PropTypes.string,\n  };\n\n  render() {\n    return (\n      <div className=\"component-display-distance\">\n        <div className=\"value\">{this.props.value}</div>\n        <div className=\"label\">Distance</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./DisplayElevation.css\";\n\nfunction elevationFromDistance(distance, faction) {\n  if (distance === null) {\n    return 0;\n  }\n\n  const dist = parseFloat(distance);\n\n  if (dist >= 100 && dist <= 1600) {\n      if (faction === null || faction === \"USA\" || faction === \"GER\") {\n        const m = -0.23703;\n        const b = 1001.46;\n        return Math.round( m * dist + b );\n      } else {\n        const m = 21.33;\n        const b = 100;\n        //Formula by sleepybjr\n        return Math.round( 1120 - (((dist / b) - 1) * m)) ;\n      }\n  }\n\n  return 0;\n}\n\nexport default class DisplayElevation extends React.Component {\n  static propTypes = {\n    faction: PropTypes.string,\n    value: PropTypes.string\n  };\n\n  render() {\n    const elevation = elevationFromDistance(this.props.value, this.props.faction);\n\n    \n    return (\n      <div className=\"component-display-elevation\">\n        <div className=\"value\">{elevation}</div>\n        <div className=\"label\">Elevation</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Button.css\";\n\nexport default class Button extends React.Component {\n  static propTypes = {\n    dark: PropTypes.bool,\n    faction: PropTypes.bool,\n    name: PropTypes.string,\n    orange: PropTypes.bool,\n    wide: PropTypes.bool,\n    clickHandler: PropTypes.func\n  };\n\n  handleClick = () => {\n    this.props.clickHandler(this.props.name);\n  };\n\n  render() {\n    const className = [\n      \"component-button\",\n      this.props.dark ? \"dark\" : \"\",\n      this.props.faction ? \"faction\" : \"\",\n      this.props.orange ? \"orange\" : \"\",\n      this.props.quart ? \"quart\" : \"\",\n      this.props.wide ? \"wide\" : \"\"\n    ];\n\n    return (\n      <div className={className.join(\" \").trim()}>\n        <button onClick={this.handleClick}>{this.props.name}</button>\n      </div>\n    );\n  }\n}\n","import Button from \"./Button\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./ButtonPanel.css\";\n\nexport default class ButtonPanel extends React.Component {\n  static propTypes = {\n    name: PropTypes.string,\n    faction: PropTypes.string,\n    clickHandler: PropTypes.func\n  };\n\n  handleClick = buttonName => {\n    this.props.clickHandler(buttonName);\n  };\n\n  render() {\n    return (\n      <div className=\"component-button-panel\">\n        <div>\n          <Button name=\"C\" clickHandler={this.handleClick} quart orange />\n          <Button name=\"+\" clickHandler={this.handleClick} quart dark />\n          <Button name=\"-\" clickHandler={this.handleClick} quart dark />\n          <Button name={this.props.faction} clickHandler={this.handleClick} quart dark faction />\n        </div>\n        <div>\n          <Button name=\"7\" clickHandler={this.handleClick} />\n          <Button name=\"8\" clickHandler={this.handleClick} />\n          <Button name=\"9\" clickHandler={this.handleClick} />\n        </div>\n        <div>\n          <Button name=\"4\" clickHandler={this.handleClick} />\n          <Button name=\"5\" clickHandler={this.handleClick} />\n          <Button name=\"6\" clickHandler={this.handleClick} />\n        </div>\n        <div>\n          <Button name=\"1\" clickHandler={this.handleClick} />\n          <Button name=\"2\" clickHandler={this.handleClick} />\n          <Button name=\"3\" clickHandler={this.handleClick} />\n        </div>\n        <div>\n          <Button name=\"0\" clickHandler={this.handleClick} wide />\n        </div>\n      </div>\n    );\n  }\n}\n","import Big from \"big.js\";\n\nimport isNumber from \"./isNumber\";\n\nfunction elevationFromDistance(obj, distance) {\n  if (distance === null) {\n    return null;\n  }\n\n  const dist = parseFloat(distance);\n\n  if (dist >= 100 && dist <= 1600) {\n      if (obj.faction === null || obj.faction === \"USA\" || obj.faction === \"GER\") {\n        const m = -0.23703;\n        const b = 1001.46;\n        return Math.round( m * dist + b );\n      } else {\n        const m = 21.33;\n        const b = 100;\n        //Formula by sleepybjr\n        return Math.round( 1120 - (((dist / b) - 1) * m)) ;\n      }\n  }\n\n  return null;\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"USA\") {\n    return {faction: \"GER\"};\n  } else if (buttonName === \"GER\") {\n    return {faction: \"RUS\"};\n  } else if (buttonName === \"RUS\") {\n    return {faction: \"USA\"};\n  }\n\n  if (buttonName === \"C\") {\n    return {\n      total: null,\n      next: null,\n      distance: null\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === \"0\" && obj.distance === \"0\") {\n      // Don't change anything when entering consecutive zeroes\n      return {};\n    }\n\n    let newDistance;\n\n    if (obj.distance === null || obj.distance === \"0\") {\n      // Replace leading zero\n      newDistance = buttonName;\n    } else {\n      // Allow a maximum of 4 digits\n      if (obj.distance.length < 4) {\n        // Concatenate button to existing number\n        newDistance = obj.distance + buttonName;\n      } else {\n        // Ignore button and keep the same distance\n        newDistance = obj.distance;\n      }\n    }\n\n    return {\n      distance: newDistance,\n      total: null,\n    };\n  }\n\n  if (buttonName === \"+\") {\n    // Increase distance by 1\n    let newDistance;\n    \n    if (obj.distance === null) {\n      newDistance = \"1\";\n    } else if (parseInt(obj.distance) < 9999) {\n      newDistance = (parseInt(obj.distance) + 1).toString();\n    } else {\n      newDistance = obj.distance;\n    }\n\n    return {\n      distance: newDistance\n    };\n  }\n\n  if (buttonName === \"-\") {\n    // Decrease distance by 1\n    let newDistance = (obj.distance === null || obj.distance === \"1\") ? null : (parseInt(obj.distance) - 1).toString();\n\n    return {\n      distance: newDistance\n    };    \n  }\n\n  // if (buttonName === \"%\") {\n  //   if (obj.operation && obj.next) {\n  //     const result = operate(obj.total, obj.next, obj.operation);\n  //     return {\n  //       total: Big(result)\n  //         .div(Big(\"100\"))\n  //         .toString(),\n  //       next: null,\n  //       operation: null,\n  //     };\n  //   }\n  //   if (obj.next) {\n  //     return {\n  //       next: Big(obj.next)\n  //         .div(Big(\"100\"))\n  //         .toString(),\n  //     };\n  //   }\n  //   return {};\n  // }\n\n  // if (buttonName === \".\") {\n  //   if (obj.next) {\n  //     // ignore a . if the next number already has one\n  //     if (obj.next.includes(\".\")) {\n  //       return {};\n  //     }\n  //     return { next: obj.next + \".\" };\n  //   }\n  //   return { next: \"0.\" };\n  // }\n\n  // if (buttonName === \"=\") {\n  //   if (obj.next && obj.operation) {\n  //     return {\n  //       total: operate(obj.total, obj.next, obj.operation),\n  //       next: null,\n  //       operation: null,\n  //     };\n  //   } else {\n  //     // '=' with no operation, nothing to do\n  //     return {};\n  //   }\n  // }\n\n  // if (buttonName === \"+/-\") {\n  //   if (obj.next) {\n  //     return { next: (-1 * parseFloat(obj.next)).toString() };\n  //   }\n  //   if (obj.total) {\n  //     return { total: (-1 * parseFloat(obj.total)).toString() };\n  //   }\n  //   return {};\n  // }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  // if (obj.operation) {\n  //   return {\n  //     total: operate(obj.total, obj.next, obj.operation),\n  //     next: null,\n  //     operation: buttonName,\n  //   };\n  // }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  // if (!obj.next) {\n  //   return { operation: buttonName };\n  // }\n\n  // save the operation and shift 'next' into 'total'\n  // return {\n  //   total: obj.next,\n  //   next: null,\n  //   operation: buttonName,\n  // };\n}\n","export default function isNumber(item) {\n  return /[0-9]+/.test(item);\n}\n","import React from \"react\";\nimport DisplayDistance from \"./DisplayDistance\";\nimport DisplayElevation from \"./DisplayElevation\";\nimport ButtonPanel from \"./ButtonPanel\";\nimport calculate from \"../logic/calculate\";\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n  state = {\n    distance: null,\n    elevation: null,\n    faction: \"USA\"\n  };\n\n  handleClick = buttonName => {\n    this.setState(calculate(this.state, buttonName));\n  };\n\n  render() {\n    return (\n      <div className=\"component-app\">\n        <div>\n          <DisplayDistance value={this.state.distance || \"0\"} />\n          <DisplayElevation value={this.state.distance || \"0\"} faction={this.state.faction} />\n        </div>\n        <ButtonPanel clickHandler={this.handleClick} faction={this.state.faction} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./component/App\";\nimport \"./index.css\";\nimport \"github-fork-ribbon-css/gh-fork-ribbon.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}